# Hotels
type Hotels {
  hotelName: String
  language: LanguageEnum!
  code: Int
  type: HotelTypeEnum!
  countryCode: String
  stateCode: String
  destinationCode: String
  zoneCode: Int
  categoryCode: String
  categoryGroupCode: String
  chainCode: String
  accommodationTypeCode: String
  postalCode: String
  email: String
  web: String
  lastUpdate: String
  S2C: String
  ranking: Int
  images(input: ImagesInput): [Images]
  interestPoints(input: HotelInterestPointsInput): [InterestPoints]
  issues(input: HotelIssuesInput): [Issues]
  facilities(input: FacilitiesInput): [Facilities]
  rooms(input: HotelRoomsInput): [Rooms]
  phones(input: HotelPhonesInput): [Phones]
  city: City
  address: Address
  amenityCodes: [Int]
  segmentCodes: [Int]
  boardCodes: [String]
  coordinates: Coordinates
  description: Description
  name: Name
}

type Images {
  imageTypeCode: String
  path: String
  order: Int
  visualOrder: Int
}

type InterestPoints {
  facilityCode: Int
  facilityGroupCode: Int
  order: Int
  poiName: String
  distance: String
}

type Issues {
  issueCode: String
  issueType: String
  dateFrom: String
  dateTo: String
  order: Int
  alternative: Boolean
}

type Facilities {
  facilityName: String
  facilityCode: Int
  facilityGroupName: String
  facilityGroupCode: Int
  order: Int
  number: Int
  voucher: Boolean
}

type RoomStayFacilities {
  facilityName: String
  facilityCode: Int
  facilityGroupName: String
  facilityGroupCode: Int
  number: Int
}

type RoomStays {
  stayType: String
  order: String
  description: String
  roomStayFacilities: [RoomStayFacilities]
}

type RoomFacilities {
  facilityName: String
  facilityCode: Int
  facilityGroupName: String
  facilityGroupCode: Int
  indLogic: Boolean
  number: Int
  voucher: Boolean
}

type Rooms {
  hotelCode: Int
  hotelType: HotelTypeEnum!
  roomCode: String
  isParentRoom: Boolean
  minPax: Int
  maxPax: Int
  maxAdults: Int
  maxChildren: Int
  minAdults: Int
  roomType: String
  characteristicCode: String
  roomStays(input: StaysInput): [RoomStays]
  roomFacilities(input: FacilitiesInput): [RoomFacilities]
  roomImages(input: ImagesInput): [Images]
}

type Phones {
  phoneNumber: String
  phoneType: String
}

type City {
  content: String
}

type Address {
  content: String
  street: String
  number: String
}

type Coordinates {
  longitude: Float
  latitude: Float
}

type Description {
  content: String
}

type Name {
  content: String
}

type HotelsData {
  hotels: [Hotels!]!
  pagination: PaginationType!
}

input HotelsInput {
  language: LanguageEnum!
  pagination: PaginationInput!
  geolocation: HotelsGeolocationInput
  keywords: HotelsKeywordsInput
  id: Int
  IsPrice: Boolean
  occupancies: HotelsOccupanciesInput
}

input HotelsOccupanciesInput {
  rooms: Int!
  adults: Int!
  children: Int!
}

input ImagesInput {
  typeCode: String!
  offset: Int!
  limit: Int!
}

input HotelInterestPointsInput {
  offset: Int!
  limit: Int!
}

input HotelIssuesInput {
  offset: Int!
  limit: Int!
}

input StaysInput {
  offset: Int!
  limit: Int!
}

input FacilitiesInput {
  groupCode: Int!
  offset: Int!
  limit: Int!
}

input HotelRoomsInput {
  offset: Int!
  limit: Int!
}

input HotelPhonesInput {
  offset: Int!
  limit: Int!
}

input HotelsKeywordsInput {
  keyword: [String!]!
}

input HotelsGeolocationInput {
  latitude: Float!
  longitude: Float!
  radius: Int!
}

# Query
extend type Query {
  getHotels(input: HotelsInput!): HotelsData!
}
